#!/bin/sh

# PXE auto installer - PART TWO
# NOTE: This is run from /etc/rc.local after D-I have rebooted
#       the machine.
#       We're going to need MySQL etc, etc be up and running to
#       be able to do the install, so this needs to be run in
#       the real FS after the D-I install.

do_install() {
    apt-get -y --no-install-recommends install $*
}

get_debconf_value () {
    debconf-get-selections | \
        egrep "^${1}[ $(printf '\t')].*${2}[ $(printf '\t')]" | \
        sed 's@.*[ \t]@@'
}

ini_unset_value () {
    local file="$1"
    local value="$2"

    sed -i "s@^\(${value}[ \t]\)=.*@#\1 = <None>@" "${file}"
}

LOCALSERVER="server.domain.tld"
LOGFILE="/var/tmp/rc.install.log"
PKGOS_VERBOSE=yes
[ -z "${DEBIAN_FRONTEND}" ] && DEBIAN_FRONTEND="noninteractive"
[ -z "${SQLDB}" ] && SQLDB="mysql" # mariadb - !!DOES NOT WORK!!
export LOCALSERVER LOGFILE DEBIAN_FRONTEND SQLDB PKGOS_VERBOSE

if [ "${1}" = "reset" ] && echo "${hostname}" | grep -iq "^blade[A-Z][0-9][0-9]"
then
    dpkg --purge mysql-server-5.6 rabbitmq-server keystone
    curl -s http://${LOCALSERVER}/PXEBoot/debconf_openstack-control.txt | \
        sed 's@\t.*@@' | sort | uniq | \
        while read pkg; do
	    echo PURGE | debconf-communicate "${pkg}"
	done
    exit 0
fi

[ -f "/var/tmp/rc.install.done" ] && exit 0

# Need to wait for the interface to come up.
while ! ping -c1 ftp.uk.debian.org > /dev/null 2>&1; do sleep 5; done

exec 1<&-		# Close STDOUT file descriptor
exec 2<&-		# Close STDERR file descriptor
exec 1<>$LOGFILE	# Open STDOUT as $LOGFILE file for read and write.
exec 2>&1		# Redirect STDERR to STDOUT
chmod 0600 /var/tmp/rc.install.log

echo "=> Starting rc.install: $(date) <="

set -ex

# Get IP of this host
set -- $(/sbin/ip address | egrep " eth.* UP ")
iface="$(echo "${2}" | sed 's@:@@')"
set -- $(/sbin/ifconfig "${iface}" | grep ' inet ')
ip="$(echo "${2}" | sed 's@.*:@@')"

# Get the hostname. This is the simplest and fastest.
hostname="$(cat /etc/hostname)"

# Make sure that we're using the real IP as hostname, not the localhost address.
sed -i "s@^127.*${hostname}@${ip}\t${hostname}.$(dnsdomainname)\t${hostname}@" /etc/hosts

apt-get update
if echo "${hostname}" | grep -iq "^blade[A-Z][0-9][0-9]"; then
    # A blade.
    echo "=> Generic blade installation."

    # Upgrade system to Sid.
    apt-get update
    apt-get -y dist-upgrade

    # Need to modify sshd config in Sid. TODO: Generate new, personal, ssh keys.
    echo 'PubkeyAcceptedKeyTypes=+ssh-dss' >> /etc/ssh/sshd_config
    systemctl restart ssh

    # Install the HP utilities, dbconfig and Openstack packaging tools.
    do_install hp-snmp-agents hponcfg dbconfig-mysql openstack-pkg-tools \
        vlan openvswitch-switch
    sed -i "s@'false'@'true'@" /etc/dbconfig-common/config

    # Remove the 4.6.0 kernel (it does not come with "aufs", which we'll need
    # for Docker). Should leave us with only 3.16.0. We remove it so that
    # it's not accidentally booted.
    dpkg --purge linux-image-4.6.0-1-amd64 linux-image-amd64

    # Setup internal network.
    ipnr="$(echo "${ip}" | sed 's@.*\.@@')"
    cp /etc/network/interfaces /etc/network/interfaces.orig
    cat <<EOF >> /etc/network/interfaces

# Provider network
auto br-provider
iface br-provider inet static
	address 10.99.0.${ipnr}
	netmask 255.255.255.0
	network 10.99.0.0
	broadcast 10.99.0.255
	dns-nameservers 10.0.0.254
 
# Provider network interface
auto eth0
iface eth0 inet manual
	up ifconfig $IFACE 0.0.0.0 up
	up ip link set $IFACE promisc on
	down ip link set $IFACE promisc off
	down ifconfig $IFACE down
EOF
    ifup eth0

    # Disable IPv6.
    cp /etc/sysctl.conf /etc/sysctl.conf.orig
    cat <<EOF >> /etc/sysctl.conf

# Disable IPv6.
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
net.ipv6.conf.eth0.disable_ipv6 = 1
net.ipv6.conf.eth1.disable_ipv6 = 1

# Disable filtering
net.ipv4.conf.all.rp_filter = 0
net.ipv4.conf.default.rp_filter = 0
EOF
    sysctl -p

    # Get the Openstack RC file. Going to need that both in the testing of
    # Keystone as well as local Openstack configuration further down.
    curl -s http://${LOCALSERVER}/PXEBoot/admin-openrc > /root/admin-openrc
    . /root/admin-openrc
fi

# Always need NTP!
do_install ntp ntpdate

nr="$(echo "${hostname}" | \
    sed -e 's@.*blade[A-Z]@@i' -e 's@^0@@' -e 's@[a-z]$@@')"
if echo "${hostname}" | grep -qi "^blade" && [ "${nr}" -ge "3" ]; then
    # => A Compute node!
    echo "=> Installing a Compute node."

    # Preseed debconf
    curl -s http://${LOCALSERVER}/PXEBoot/debconf_openstack-compute.txt | \
        sed "s@10\.0\.4\.3@${ip}@" | \
        debconf-set-selections

    # Install the SQL clients. Not required, but nice to have.
    if [ "${SQLDB}" = "mysql" ]; then
        do_install mysql-client-5.6
    else
        do_install mariadb-client-10.0
    fi

    # Properly seed dbconfig - It's not enough to just have it in the debconf
    # db, we also need to create the config files for dbconfig-common to use.
    for app in magnum-common nova-common; do
        admpass="$(get_debconf_value "${app}" "/mysql/admin-pass")"
        pass="$(get_debconf_value "${app}" "/mysql/app-pass")"
        user="$(get_debconf_value "${app}" "/db/app-user")"
        db="$(get_debconf_value "${app}" "/db/dbname")"

        curl -s http://${LOCALSERVER}/PXEBoot/dbconfig-common-template.conf | \
            sed -e "s@%APP%@${app}@" -e "s@%PASS%@${pass}@" \
                -e "s@%PKG%@${pkg}@" -e "s@%USER%@${user}@" \
                -e "s@%DB%@${db}@"   -e "s@%ADMPASS%@${admpass}@" \
                > "/etc/dbconfig-common/${app}.conf"
    done

    # Install the Compute packages.
    # nova-compute-ironic : Conflicts: nova-compute-kvm but 2:13.0.0-4 is to be installed
    # nova-compute-kvm : Conflicts: nova-compute-ironic but 2:13.0.0-4 is to be installed
    do_install nova-compute-kvm nova-console nova-consoleproxy magnum-conductor \
        fping ovmf neutron-openvswitch-agent neutron-lbaas-agent designate-agent \
        neutron-l3-agent

    # ======================================================================

    # Do local setup of Openstack.
    curl -s http://${LOCALSERVER}/PXEBoot/local_setup_openstack-compute.sh > \
        /var/tmp/local_setup_openstack-compute.sh
    sh -x /var/tmp/local_setup_openstack-compute.sh

    # Install the Nova Docker plugin.
    curl -s http://${LOCALSERVER}/PXEBoot/install_nova_docker.sh > \
        /var/tmp/install_nova_docker.sh
    sh /var/tmp/install_nova_docker.sh
elif echo "${hostname}" | grep -qi "^blade" && [ "${nr}" -le "2" ]; then
    # => A Control node
    echo "=> Installing a Control node."

    # Preseed debconf
    curl -s http://${LOCALSERVER}/PXEBoot/debconf_openstack-control.txt | \
        sed "s@10\.0\.4\.1@${ip}@" | \
        debconf-set-selections

    # Install core database packages first
    [ "${SQLDB}" = "mysql" ] && \
        server="mysql-server-5.6" || \
        server="mariadb-server-10.0"
    do_install "${server}" rabbitmq-server mongodb-server memcached

    # Create RabbitMQ user
    pass="$(get_debconf_value "barbican-common" "/rabbit_password")"
    rabbitmqctl add_user openstack "${pass}"
    rabbitmqctl set_permissions -p / openstack ".*" ".*" ".*"

    # Make SQL server bind to *
    [ "${SQLDB}" = "mysql" ] && \
        cfg="/etc/mysql/mysql.conf.d/mysqld.cnf" || \
        cfg="/etc/mysql/mariadb.conf.d/50-server.cnf"
    sed -i "s@^bind-address[ \t].*@bind-address\t= 0.0.0.0@" "${cfg}"
    sed -i "s@^#max_connections[ \t].*@max_connections\t=5000@" "${cfg}"
    echo "SET GLOBAL max_connections = 5000;" | \
        mysql -uroot -psecret11 -hlocalhost mysql
    /etc/init.d/mysql restart

    # ======================================================================

    # Core-core packages installed. Let's install next step: Keystone and get
    # that working.

    # ======================================================================

    # Seed the SQL database
    user="$(grep ^user /etc/mysql/debian.cnf | tail -n1 | sed 's@.* @@')"
    pass="$(grep ^password /etc/mysql/debian.cnf | tail -n1 | sed 's@.* @@')"
    curl -s http://${LOCALSERVER}/PXEBoot/blade-users.sql-${SQLDB} | \
        mysql -hlocalhost -u"${user}" -p"${pass}" mysql

    # Properly seed dbconfig - It's not enough to just have it in the debconf
    # db, we also need to create the config files for dbconfig-common to use.
    for app in barbican cinder designate glance heat ironic magnum manila \
        mistral murano neutron nova-api nova senlin keystone trove
    do
        if [ "${app}" = "keystone" -o "${app}" = "nova-api" ]; then
            pkg="${app}"
        else
            pkg="${app}-common"
        fi

        # Most of this is primarily here because I get a postinst error when
        # installing nova-api - "You have an error in your SQL syntax".
        # If I remove the dash in the username/database (and just call it
        # "novaapi", it works).
        admpass="$(get_debconf_value "${pkg}" "/mysql/admin-pass")"
        pass="$(get_debconf_value "${pkg}" "/mysql/app-pass")"
        user="$(get_debconf_value "${pkg}" "/db/app-user")"
        db="$(get_debconf_value "${pkg}" "/db/dbname")"
        curl -s http://${LOCALSERVER}/PXEBoot/dbconfig-common-template.conf | \
            sed -e "s@%APP%@${app}@" -e "s@%PASS%@${pass}@" \
                -e "s@%PKG%@${pkg}@" -e "s@%USER%@${user}@" \
                -e "s@%DB%@${db}@"   -e "s@%ADMPASS%@${admpass}@" \
                > "/etc/dbconfig-common/${pkg}.conf"
    done

    # Prepare the configuration of the dashboard.
    mkdir -p /etc/openstack-dashboard
    curl -s http://${LOCALSERVER}/PXEBoot/dashboard.conf > \
        /etc/openstack-dashboard/local_settings.py

    # Install Openstack Authentication server and the 'openstack' script
    # as well as the dashboard.
    do_install keystone python-keystone python-openstackclient cryptsetup \
        python-django-horizon=2:9.0.0-3 openstack-dashboard=2:9.0.0-3 \
        openstack-dashboard-apache 
# TODO: !! Need to take recompiled 2:9.0.0-3 from my own repo because of roken dependencies. !!

    # Just double check - if we can't retrieve the user list, exit here,
    # no point in continuing installing on a broken system (if Keystone
    # isn't working, nothing will).
    openstack user list | grep -q admin || exit 1

    # ======================================================================

    # The base packages (MySQL, RabbitMQ, Keystone etc) are all installed.
    # Let's continue with all the other services.

    # ======================================================================

    # Setup a API package list variable.
    APIs=""
    for api in barbican-api ceilometer-api cinder-api designate-api \
        heat-api ironic-api ironic-conductor manila-api mistral-api \
        murano-api senlin-api nova-api nova-conductor magnum-api \
        magnum-conductor
    do
        APIs="${APIs} ${api} "
    done

    # Setup Engine/Server package list variable.
    ENGINEs=""
    for engine in heat-engine mistral-engine murano-engine senlin-engine \
        neutron-server zaqar-server
    do
        ENGINEs="${ENGINEs} ${engine} "
    done

    # Setup Schedulers package list variable.
    SCHEDULERs=""
    for scheduler in cinder-scheduler manila-scheduler nova-scheduler
    do
        SCHEDULERs="${SCHEDULERs} ${scheduler} "
    done

    # Setup Agents package list variable.
    # TODO: ?? Should this be done on the Controller or Compute ??.
    AGENTs=""
    for agent in ceilometer-agent-compute ceilometer-agent-ipmi \
        ceilometer-agent-notification ceilometer-agent-central \
        designate-agent neutron-dhcp-agent neutron-metering-agent \
        neutron-lbaas-agent python-neutron-lbaas neutron-l3-agent \
        neutron-vpnaas-agent python-neutron-vpnaas
    do
        AGENTs="${AGENTs} ${agent}"
    done

    # Setup Open vSwitch packages.
    OPENvSWITCHs=""
    for pkg in openvswitch-switch neutron-openvswitch-agent \
        neutron-plugin-openvswitch-agent 
    do
        OPENvSWITCHs="${OPENvSWITCHs} ${pkg}"
    done

    # Install Openstack services.
    # TODO: !! Isn't completely packaged yet !!
    # fuel-agent fuel-ha-utils fuel-library fuel-migrate fuel-misc \
    # fuel-nailgun-agent fuel-notify fuel-rabbit-fence fuel-umm \
    # fuel-web-apache
    #
    # TODO: !! MySQL errors !!
    # trove-api trove-guestagent trove-conductor trove-taskmanager 
    #
    # TODO: !! As soon as it's released !!
    # neutron-fwaas???
    do_install "${APIs}" "${ENGINEs}" "${SCHEDULERs}" "${AGENTs}" \
        "${OPENvSWITCHs}" barbican-keystone-listener barbican-worker \
        ceilometer-alarm-notifier ceilometer-collector cinder-backup \
        cinder-volume designate designate-central designate-mdns \
        designate-pool-manager designate-sink designate-zone-manager \
        glance glance-glare ironic-fa-deploy \
        ironic-inspector manila-share mistral-executor nova-volume \
        haproxy nfs-kernel-server

    # ======================================================================

    # Openstack is now installed. Correctly we hope - TODO: Check this somehow?
    # Time to do tune the setup for my use-case(s).

    # ======================================================================

    # Do local setup of Openstack.
    curl -s http://${LOCALSERVER}/PXEBoot/local_setup_openstack-control.sh > \
        /var/tmp/local_setup_openstack-control.sh
    sh -x /var/tmp/local_setup_openstack-control.sh
fi

# ======================================================================
# Cleanup etc.

# Remove all passwords from the debconf database.
# NOTE: This is technically pointless. It's still available
#       from the master file on LOCALSERVER.
debconf-get-selections | \
    grep "^[a-z].*[ $(printf '\t')]password[ $(printf '\t')].*" | \
    sed "s@^\([a-z].*[ $(printf '\t')]password[ $(printf '\t')]\).*@\1@" | \
    debconf-set-selections

# Remove all passwords from the dbconfig-common files.
# NOTE: This is technically pointless. It's still available
#       from the master file on LOCALSERVER.
egrep '^dbc_dbpass|^dbc_dbadmpass' /etc/dbconfig-common/* | \
    sed 's@:.*@@' | sort | uniq | \
    while read file; do
	cat "${file}" | sed -e "s@^\(dbc_dbpass='\).*@\1'@" \
            -e "s@^\(dbc_dbadmpass='\).*@\1'@" > \
            "${file}.new"
        mv "${file}.new" "${file}"
    done

apt-get -y autoremove
apt-get clean

sed -i "s@^\(sh /var/tmp/rc\.install.*\)\$@#\1@" /etc/rc.local
touch /var/tmp/rc.install.done

echo "=> W E ' R E   A L L   D O N E : $(date) <="
