#!/bin/sh

# PXE auto installer - PART TWO

# We're going to need MySQL etc, etc be up and running
# to be able to do the install, so this needs to be run
# in the real FS after the D-I install.

do_install() {
    apt-get -y --no-install-recommends install $*
}

get_debconf_passwd () {
    debconf-get-selections | \
        egrep "^${1}[ $(printf '\t')].*${2}" | \
        sed 's@.*[ \t]@@'
}

set -ex

LOCALSERVER="localserver"
LOGFILE="/var/tmp/rc.install.log"
[ -z "${DEBIAN_FRONTEND}" ] && DEBIAN_FRONTEND="noninteractive"
[ -z "${SQLDB}" ] && SQLDB="mysql" # mariadb - !!DOES NOT WORK!!
export LOCALSERVER LOGFILE DEBIAN_FRONTEND SQLDB

if [ "${1}" = "reset" ]; then
    dpkg --purge mysql-server-5.6 rabbitmq-server keystone
    curl -s http://${LOCALSERVER}/PXEBoot/debconf_openstack-control.txt | \
        sed 's@\t.*@@' | sort | uniq | \
        while read pkg; do
	    echo PURGE | debconf-communicate "${pkg}"
	done
    exit 0
fi

[ -f "/var/tmp/rc.install.done" ] && exit 0

# Need to wait for the interface to come up.
while ! ping -c1 ftp.uk.debian.org > /dev/null 2>&1; do sleep 5; done

exec 1<&-		# Close STDOUT file descriptor
exec 2<&-		# Close STDERR file descriptor
exec 1<>$LOGFILE	# Open STDOUT as $LOGFILE file for read and write.
exec 2>&1		# Redirect STDERR to STDOUT

chmod 0600 /var/tmp/rc.install.log

# Get IP of this host
set -- $(/sbin/ip address | egrep " eth.* UP ")
iface="$(echo "${2}" | sed 's@:@@')"
set -- $(/sbin/ifconfig "${iface}" | grep ' inet ')
ip="$(echo "${2}" | sed 's@.*:@@')"

# Get the hostname. This is the simplest and fastest.
hostname="$(cat /etc/hostname)"

# Make sure that we're using the real IP as hostname, not the localhost address.
sed -i "s@^127.*${hostname}@${ip}\t${hostname}.$(dnsdomainname)\t${hostname}@" /etc/hosts

apt-get update
if echo "${hostname}" | grep -iq "^blade[A-Z][0-9][0-9]"; then
    # A blade - upgrade system to Sid.
    apt-get -y dist-upgrade
fi

nr="$(echo "${hostname}" | \
    sed -e 's@.*blade[A-Z]@@i' -e 's@^0@@' -e 's@[a-z]$@@')"
if echo "${hostname}" | grep -qi "^blade" && [ "${nr}" -ge "3" ]; then
    # => A Compute node!
    echo

    # Preseed debconf
    curl -s http://${LOCALSERVER}/PXEBoot/debconf_openstack-compute.txt | \
        sed "s@10\.0\.4\.3@${ip}@" | \
        debconf-set-selections

    # Install the SQL clients
    if [ "${SQLDB}" = "mysql" ]; then
        do_install mysql-client-5.6
    else
        do_install mariadb-client-10.0
    fi

    # Properly seed dbconfig - It's not enough to just have it in the dbconf
    # db, we also need to create the config files.
    for app in magnum nova; do
        cfg="/etc/dbconfig-common/${app}-common.conf"
        pass="$(get_debconf_passwd "${app}-common" "/mysql/app-pass")"

        curl -s http://${LOCALSERVER}/PXEBoot/dbconfig-common-template.conf | \
            sed -e "s@%APP%@${app}@" -e "s@%PASS%@${pass}@" \
                -e "s@%PKG%@${app}-common@" > "${cfg}"
    done

    # Install the Compute packages
    do_install nova-compute-kvm nova-console magnum-conductor fping

    # ======================================================================

    # Update the config file
    openstack-config --set /etc/nova/nova.conf DEFAULT dmz_net 10.99.0.0
    openstack-config --set /etc/nova/nova.conf DEFAULT dmz_mask 255.255.255.0
    openstack-config --set /etc/nova/nova.conf DEFAULT pybasedir /usr/lib/python2.7/dist-packages
    openstack-config --set /etc/nova/nova.conf DEFAULT memcached_servers 127.0.0.1:11211
    openstack-config --set /etc/nova/nova.conf DEFAULT internal_service_availability_zone internal
    openstack-config --set /etc/nova/nova.conf DEFAULT default_availability_zone nova
    openstack-config --set /etc/nova/nova.conf DEFAULT cross_az_attach True
    openstack-config --set /etc/nova/nova.conf DEFAULT default_schedule_zone nova
    openstack-config --set /etc/nova/nova.conf DEFAULT block_device_allocate_retries 300
    openstack-config --set /etc/nova/nova.conf DEFAULT block_device_allocate_retries_interval 10
    openstack-config --set /etc/nova/nova.conf DEFAULT block_device_creation_timeout 300
    curl -s http://${LOCALSERVER}/PXEBoot/nova.sed > /var/tmp/nova.sed
    sed -i -f /var/tmp/nova.sed /etc/nova/nova.conf

    # Install the Nova Docker plugin
    curl -s http://${LOCALSERVER}/PXEBoot/PXEBoot/install_nova_docker.sh > \
        /var/tmp/install_nova_docker.sh
    sh /var/tmp/install_nova_docker.sh
elif echo "${hostname}" | grep -qi "^blade" && [ "${nr}" -le "2" ]; then
    # => A Control node

    # Preseed debconf
    curl -s http://${LOCALSERVER}/PXEBoot/debconf_openstack-control.txt | \
        sed "s@10\.0\.4\.1@${ip}@" | \
        debconf-set-selections

    # Install core database packages first
    [ "${SQLDB}" = "mysql" ] && \
        server="mysql-server-5.6" || \
        server="mariadb-server-10.0"
    do_install "${server}" rabbitmq-server mongodb-server memcached

    # Create RabbitMQ user
    pass="$(get_debconf_passwd "barbican-common" "/rabbit_password")"
    rabbitmqctl add_user openstack "${pass}"
    rabbitmqctl set_permissions -p / openstack ".*" ".*" ".*"

    # Make SQL server bind to *
    [ "${SQLDB}" = "mysql" ] && \
        cfg="/etc/mysql/mysql.conf.d/mysqld.cnf" || \
        cfg="/etc/mysql/mariadb.conf.d/50-server.cnf"
    sed -i "s@^bind-address[ \t].*@bind-address\t= 0.0.0.0@" "${cfg}"
    /etc/init.d/mysql restart

    # Seed the SQL database
    user="$(grep ^user /etc/mysql/debian.cnf | tail -n1 | sed 's@.* @@')"
    pass="$(grep ^password /etc/mysql/debian.cnf | tail -n1 | sed 's@.* @@')"
    curl -s http://${LOCALSERVER}/PXEBoot/blade-users.sql-${SQLDB} | \
        mysql -hlocalhost -u"${user}" -p"${pass}" mysql

    # Properly seed dbconfig - It's not enough to just have it in the dbconf
    # db, we also need to create the config files.
    for app in barbican cinder designate glance heat ironic magnum manila \
        mistral murano neutron nova-api nova senlin keystone
    do
        if [ "${app}" = "keystone" -o "${app}" = "nova-api" ]; then
            pkg="${app}"
        else
            pkg="${app}-common"
        fi
        pass="$(get_debconf_passwd "${pkg}" "/mysql/app-pass")"
        curl -s http://${LOCALSERVER}/PXEBoot/dbconfig-common-template.conf | \
            sed -e "s@%APP%@${app}@" -e "s@%PASS%@${pass}@" \
            -e "s@%PKG%@${pkg}@" > "/etc/dbconfig-common/${pkg}.conf"
    done

    # Setup the dashboard
    mkdir -p /etc/openstack-dashboard
    curl -s http://${LOCALSERVER}/PXEBoot/dashboard.conf > /etc/openstack-dashboard/local_settings.py

    # Install Openstack Authentication server and the 'openstack' script.
    do_install keystone python-openstackclient openstack-dashboard-apache cryptsetup

    # Get the Openstack RC file.
    curl -s http://${LOCALSERVER}/PXEBoot/admin-openrc > /root/admin-openrc
    . /root/admin-openrc

    # Just double check - if we can't retrieve the user list, exit here,
    # no point in continuing installing on a broken system.
    openstack user list | grep -q admin || exit 1

    # ======================================================================

    # The base packages (MySQL, RabbitMQ, Keystone etc) are all installed.
    # Let's continue with all the other services.

    # ======================================================================

    # Setup a API package list variable
    APIs=""
    for api in barbican-api ceilometer-api cinder-api designate-api \
        glance-api heat-api ironic-api ironic-conductor manila-api \
        mistral-api murano-api senlin-api nova-api nova-conductor \
        magnum-api magnum-conductor
    do
        APIs="${APIs}${api} "
    done

    # Setup Engine/Server package list variable
    ENGINEs=""
    for engine in heat-engine mistral-engine murano-engine senlin-engine \
        neutron-server zaqar-server
    do
        ENGINEs="${ENGINEs}${engine} "
    done

    # Setup Schedulre package list variable
    SCHEDULERs=""
    for scheduler in cinder-scheduler manila-scheduler nova-scheduler
    do
        SCHEDULERs="${SCHEDULERs}${scheduler} "
    done

    # Install Openstack services.
    # fuel-agent fuel-ha-utils fuel-library fuel-migrate fuel-misc \
    # fuel-nailgun-agent fuel-notify fuel-rabbit-fence fuel-umm \
    # fuel-web-apache docker
    # trove-api trove-conductor trove-guestagent trove-taskmanager
    do_install "${APIs}" "${ENGINEs}" "${SCHEDULERs}" \
        barbican-keystone-listener barbican-worker ceilometer-agent-compute \
        ceilometer-agent-ipmi ceilometer-agent-notification \
        ceilometer-alarm-notifier ceilometer-collector \
        ceilometer-agent-central cinder-backup cinder-volume designate \
        designate-agent designate-central designate-mdns \
        designate-pool-manager designate-sink designate-zone-manager \
        glance glance-glare glance-registry glances ironic-fa-deploy \
        ironic-inspector manila-share mistral-executor nova-volume  

    # ======================================================================

    # Openstack is now installed. Correctly we hope - TODO: Check this somehow?
    # Time to do some local configuration setup.

    # ======================================================================

    # Configure Manila.
    openstack-config --set /etc/manila/manila.conf DEFAULT driver_handles_share_servers True
    openstack-config --set /etc/manila/manila.conf DEFAULT service_instance_user True
    openstack-config --set /etc/manila/manila.conf DEFAULT storage_availability_zone nova
    for init in /etc/init.d/manila-*; do $init restart; done

    # Configure Nova.
    openstack-config --set /etc/nova/nova.conf DEFAULT dmz_net 10.99.0.0
    openstack-config --set /etc/nova/nova.conf DEFAULT dmz_mask 255.255.255.0
    openstack-config --set /etc/nova/nova.conf DEFAULT pybasedir /usr/lib/python2.7/dist-packages
    openstack-config --set /etc/nova/nova.conf DEFAULT enabled_apis osapi_compute,metadata
    openstack-config --set /etc/nova/nova.conf DEFAULT use_neutron True
    openstack-config --set /etc/nova/nova.conf DEFAULT memcached_servers 127.0.0.1:11211
    openstack-config --set /etc/nova/nova.conf DEFAULT internal_service_availability_zone internal
    openstack-config --set /etc/nova/nova.conf DEFAULT default_availability_zone nova
    openstack-config --set /etc/nova/nova.conf DEFAULT cross_az_attach True
    openstack-config --set /etc/nova/nova.conf DEFAULT default_schedule_zone nova
    openstack-config --set /etc/nova/nova.conf DEFAULT block_device_allocate_retries 300
    openstack-config --set /etc/nova/nova.conf DEFAULT block_device_allocate_retries_interval 10
    openstack-config --set /etc/nova/nova.conf DEFAULT block_device_creation_timeout 300
#    curl -s http://${LOCALSERVER}/PXEBoot/nova.sed > /var/tmp/nova.sed
#    sed -i -f /var/tmp/nova.sed /etc/nova/nova.conf
    for init in /etc/init.d/nova-*; do $init restart; done

    # Configure Zaqar.
    openstack-config --set /etc/zaqar/zaqar.conf DEFAULT database zaqar
    openstack-config --set /etc/zaqar/zaqar.conf DEFAULT unreliable True
    openstack-config --set /etc/zaqar/zaqar.conf DEFAULT bind = ${ip}
    /etc/init.d/zaqar-server restart

    # Configure Cinder.
    openstack-config --set /etc/cinder/cinder.conf DEFAULT volume_group blade_center
    openstack-config --set /etc/cinder/cinder.conf DEFAULT storage_availability_zone nova
    openstack-config --set /etc/cinder/cinder.conf DEFAULT default_availability_zone nova
#    curl -s http://${LOCALSERVER}/PXEBoot/cinder.sed > /var/tmp/cinder.sed
#    sed -i -f /var/tmp/cinder.sed /etc/cinder/cinder.conf
    for init in /etc/init.d/cinder-*; do $init restart; done

    # Configure Neutron.
    openstack-config --set /etc/neutron/neutron.conf DEFAULT default_availability_zones nova
    openstack-config --set /etc/neutron/neutron.conf DEFAULT availability_zone nova
    /etc/init.d/neutron-server restart

    # Recreate the flavors (with new ones).
    curl -s http://${LOCALSERVER}/PXEBoot/PXEBoot/install_openstack_flavors.sh > \
        /var/tmp/install_openstack_flavors.sh
    sh /var/tmp/install_openstack_flavors.sh

    # Install the ZFS/ZoL Openstack Cinder plugin.
    curl -s http://${LOCALSERVER}/PXEBoot/PXEBoot/install_cinder_zfs.sh > \
        /var/tmp/install_cinder_zfs.sh
    sh /var/tmp/install_cinder_zfs.sh
fi

apt-get -y autoremove
apt-get clean

sed -i "s@^\(sh /var/tmp/rc\.install\)\$@#\1@" /etc/rc.local
touch /var/tmp/rc.install.done

echo "=> W E ' R E   A L L   D O N E :" $(date) " <="
